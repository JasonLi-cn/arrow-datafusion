# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at

#   http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

statement ok
CREATE TABLE test (c1 VARCHAR,c2 VARCHAR) as values
('a','A'), ('b','B')

# grouping_with_grouping_sets
query TTIIII
select
  c1,
  c2,
  grouping(c1),
  grouping(c2),
  grouping(c1, c2),
  grouping(c2, c1)
from
  test
group by
  grouping sets (
    (c1, c2),
    (c1),
    (c2),
    ()
  );
----
a A 0 0 0 0
b B 0 0 0 0
a NULL 0 1 1 2
NULL A 1 0 2 1
NULL NULL 1 1 3 3
b NULL 0 1 1 2
NULL B 1 0 2 1

# grouping_with_cube
query TTIIII
select
  c1,
  c2,
  grouping(c1),
  grouping(c2),
  grouping(c1, c2),
  grouping(c2, c1)
from
  test
group by
  cube(c1, c2);
----
b NULL 0 1 1 2
NULL B 1 0 2 1
a A 0 0 0 0
b B 0 0 0 0
NULL A 1 0 2 1
a NULL 0 1 1 2
NULL NULL 1 1 3 3

# grouping_with_rollup
query TTIIII
select
  c1,
  c2,
  grouping(c1),
  grouping(c2),
  grouping(c1, c2),
  grouping(c2, c1)
from
  test
group by
  rollup(c1, c2);
----
b NULL 0 1 1 2
NULL NULL 1 1 3 3
a NULL 0 1 1 2
a A 0 0 0 0
b B 0 0 0 0

# grouping_with_add
query TTI
select
  c1,
  c2,
  grouping(c1)+grouping(c2) as g0
from
  test
group by
  rollup(c1, c2)
order by
  g0;
----
a A 0
b B 0
a NULL 1
b NULL 1
NULL NULL 2

#grouping_with_windown_function
query TTIII
select
  c1,
  c2,
  count(c1) as cnt,
  grouping(c1)+ grouping(c2) as g0,
  rank() over (
    partition by grouping(c1)+grouping(c2),
    case when grouping(c2) = 0 then c1 end
    order by
      count(c1) desc
  ) as rank_within_parent
from
  test
group by
  rollup(c1, c2)
order by
  g0 desc,
  rank_within_parent;
----
NULL NULL 2 2 1
b NULL 1 1 1
a NULL 1 1 1
b B 1 0 1
a A 1 0 1
